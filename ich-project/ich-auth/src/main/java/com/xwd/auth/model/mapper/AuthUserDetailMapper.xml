<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<!-- AuthUserDetail -->
<mapper namespace="AuthUserDetail">
	
	<resultMap id="authUserDetailResult" type="AuthUserDetail">
        <result property="id" column="ID"/>
        <result property="userId" column="USER_ID"/>
        <result property="userLocalId" column="USER_LOCAL_ID"/>
        <result property="nickName" column="NICK_NAME"/>
        <result property="sex" column="SEX"/>
        <result property="birthday" column="BIRTHDAY"/>
        <result property="school" column="SCHOOL"/>
        <result property="education" column="EDUCATION"/>
        <result property="degree" column="DEGREE"/>
        <result property="motto" column="MOTTO"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="status" column="STATUS"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	ID,
        	USER_ID,
        	USER_LOCAL_ID,
        	NICK_NAME,
        	SEX,
        	BIRTHDAY,
        	SCHOOL,
        	EDUCATION,
        	DEGREE,
        	MOTTO,
        	CREATE_TIME,
        	STATUS
	    ]]>
	</sql>
	
	<sql id="commonAliasColumns">
	    <![CDATA[
        	x.ID,
        	x.USER_ID,
        	x.USER_LOCAL_ID,
        	x.NICK_NAME,
        	x.SEX,
        	x.BIRTHDAY,
        	x.SCHOOL,
        	x.EDUCATION,
        	x.DEGREE,
        	x.MOTTO,
        	x.CREATE_TIME,
        	x.STATUS
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="AuthUserDetail">
    <![CDATA[
        INSERT INTO auth_user_detail (
        	ID,
        	USER_ID,
        	USER_LOCAL_ID,
        	NICK_NAME,
        	SEX,
        	BIRTHDAY,
        	SCHOOL,
        	EDUCATION,
        	DEGREE,
        	MOTTO,
        	CREATE_TIME,
        	STATUS
        ) VALUES (
        	#{id},
        	#{userId},
        	#{userLocalId},
        	#{nickName},
        	#{sex},
        	#{birthday},
        	#{school},
        	#{education},
        	#{degree},
        	#{motto},
        	#{createTime},
        	#{status}
        )
    ]]>
	</insert>
    
	<update id="update" parameterType="AuthUserDetail">
    <![CDATA[
        UPDATE auth_user_detail SET
	        USER_ID = #{userId},
	        USER_LOCAL_ID = #{userLocalId},
	        NICK_NAME = #{nickName},
	        SEX = #{sex},
	        BIRTHDAY = #{birthday},
	        SCHOOL = #{school},
	        EDUCATION = #{education},
	        DEGREE = #{degree},
	        MOTTO = #{motto},
	        CREATE_TIME = #{createTime},
	        STATUS = #{status}
        WHERE 
	        ID = #{id}
    ]]>
	</update>
	
	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from auth_user_detail
    ]]>
		<include refid="dynamicWhere"/>
    </delete>
    
    <delete id="batchDelete" parameterType="list">
        delete from auth_user_detail where ID IN 
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach> 
    </delete>
    
    <delete id="batchDeleteByLocalId" parameterType="list">
        delete from auth_user_detail where LOCAL_ID in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}		</foreach> 
    </delete>
    
    <select id="getById" resultMap="authUserDetailResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM auth_user_detail 
	        WHERE 
		        ID = #{id}
	    ]]>
	</select>
	
	<select id="getByIds" resultMap="authUserDetailResult">
		SELECT <include refid="commonColumns" />
		FROM auth_user_detail WHERE ID IN 
		<foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach>  
	</select>
	
	<sql id="dynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				AND USER_ID = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(userLocalId)">
				AND USER_LOCAL_ID = #{userLocalId}
			</if>
	       <if test="@Ognl@isNotEmpty(nickName)">
				AND NICK_NAME = #{nickName}
			</if>
	       <if test="@Ognl@isNotEmpty(sex)">
				AND SEX = #{sex}
			</if>
	       <if test="@Ognl@isNotEmpty(birthday)">
				AND BIRTHDAY = #{birthday}
			</if>
	       <if test="@Ognl@isNotEmpty(school)">
				AND SCHOOL = #{school}
			</if>
	       <if test="@Ognl@isNotEmpty(education)">
				AND EDUCATION = #{education}
			</if>
	       <if test="@Ognl@isNotEmpty(degree)">
				AND DEGREE = #{degree}
			</if>
	       <if test="@Ognl@isNotEmpty(motto)">
				AND MOTTO = #{motto}
			</if>
	       <if test="@Ognl@isNotEmpty(createTime)">
				AND CREATE_TIME = #{createTime}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND STATUS = #{status}
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM auth_user_detail 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="authUserDetailResult">
    	SELECT 
    	<if test="@Ognl@isEmpty(count)">
    		<include refid="commonColumns" />
    	</if>
    	<if test="@Ognl@isNotEmpty(count)">
    		count(*) as id
    	</if>
	    FROM auth_user_detail 
		<include refid="dynamicWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

