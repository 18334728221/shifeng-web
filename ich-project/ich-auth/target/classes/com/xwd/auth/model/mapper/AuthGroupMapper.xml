<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="AuthGroup">
	
	<resultMap id="authGroupResult" type="AuthGroup">
        <result property="id" column="ID"/>
        <result property="name" column="NAME"/>
        <result property="description" column="DESCRIPTION"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	ID ,
        	NAME ,
        	DESCRIPTION 
	    ]]>
	</sql>
	
	<sql id="commonAliasColumns">
	    <![CDATA[
        	x.ID ,
        	x.NAME ,
        	x.DESCRIPTION 
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="AuthGroup">
    <![CDATA[
        INSERT INTO auth_group (
        	ID ,
        	NAME ,
        	DESCRIPTION 
        ) VALUES (
        	#{id} ,
        	#{name} ,
        	#{description} 
        )
    ]]>
	</insert>
    
	<update id="update" parameterType="AuthGroup">
    <![CDATA[
        UPDATE auth_group SET
	        NAME = #{name} ,
	        DESCRIPTION = #{description} 
        WHERE 
	        ID = #{id} 
    ]]>
	</update>
	
	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from auth_group
    ]]>
		<include refid="dynamicWhere"/>
    </delete>
    
    <delete id="batchDelete" parameterType="list">
        delete from auth_group where id in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}        
		</foreach> 
    </delete>
    
    
    <select id="getById" resultMap="authGroupResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM auth_group 
	        WHERE 
		        ID = #{id} 
	    ]]>
	</select>
	
	<select id="getByIds" resultMap="authGroupResult">
		SELECT <include refid="commonColumns" />
		FROM auth_group WHERE ID IN
		<foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}        
		</foreach>  
	</select>
	
	<sql id="dynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND NAME LIKE concat('%', #{name}, '%')
			</if>
	       <if test="@Ognl@isNotEmpty(description)">
				AND DESCRIPTION = #{description}
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM auth_group 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="authGroupResult">
    	SELECT 
    	<if test="@Ognl@isEmpty(count)">
    		<include refid="commonColumns" />
    	</if>
    	<if test="@Ognl@isNotEmpty(count)">
    		count(*) AS ID 
    	</if>
	    FROM auth_group 
		<include refid="dynamicWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
    
    <select id="findExceptByGroupIdPageRequest" resultMap="authGroupResult">
    	SELECT <include refid="commonColumns" />
	    FROM auth_group 
		WHERE 
		ID != #{id}
    </select>
    
    <select id="findGroupsByUser"  resultMap="authGroupResult">     
		SELECT <include refid="commonAliasColumns" />
        FROM  
           auth_group x
        WHERE x.ID IN (SELECT Y.GROUP_ID FROM auth_user_group Y WHERE Y.USER_ID=#{userId})
	</select>
	
	<select id="findSubGroupsByGroup"  resultMap="authGroupResult">     
		SELECT <include refid="commonAliasColumns" />
        FROM  
           auth_group x
        WHERE x.ID IN (SELECT Y.CHILDREN_GROUP_ID FROM auth_children_group Y WHERE Y.GROUP_ID=#{groupId})
	</select>

	
</mapper>

