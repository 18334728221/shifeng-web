<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<!-- Address -->
<mapper namespace="Address">
	
	<resultMap id="addressResult" type="Address">
        <result property="id" column="ID"/>
        <result property="customerNo" column="CUSTOMER_NO"/>
        <result property="consignee" column="CONSIGNEE"/>
        <result property="mobile" column="MOBILE"/>
        <result property="location" column="LOCATION"/>
        <result property="detailedAddress" column="DETAILED_ADDRESS"/>
        <result property="isDefault" column="IS_DEFAULT"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="updateTime" column="UPDATE_TIME"/>
        <result property="status" column="STATUS"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	ID,
        	CUSTOMER_NO,
        	CONSIGNEE,
        	MOBILE,
        	LOCATION,
        	DETAILED_ADDRESS,
        	IS_DEFAULT,
        	CREATE_TIME,
        	UPDATE_TIME,
        	STATUS
	    ]]>
	</sql>
	
	<sql id="commonAliasColumns">
	    <![CDATA[
        	x.ID,
        	x.CUSTOMER_NO,
        	x.CONSIGNEE,
        	x.MOBILE,
        	x.LOCATION,
        	x.DETAILED_ADDRESS,
        	x.IS_DEFAULT,
        	x.CREATE_TIME,
        	x.UPDATE_TIME,
        	x.STATUS
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="Address">
    <![CDATA[
        INSERT INTO customer_address (
        	ID,
        	CUSTOMER_NO,
        	CONSIGNEE,
        	MOBILE,
        	LOCATION,
        	DETAILED_ADDRESS,
        	IS_DEFAULT,
        	CREATE_TIME,
        	UPDATE_TIME,
        	STATUS
        ) VALUES (
        	#{id},
        	#{customerNo},
        	#{consignee},
        	#{mobile},
        	#{location},
        	#{detailedAddress},
        	#{isDefault},
        	#{createTime},
        	#{updateTime},
        	#{status}
        )
    ]]>
	</insert>
    
	<update id="update" parameterType="Address">
    <![CDATA[
        UPDATE customer_address SET
	        CUSTOMER_NO = #{customerNo},
	        CONSIGNEE = #{consignee},
	        MOBILE = #{mobile},
	        LOCATION = #{location},
	        DETAILED_ADDRESS = #{detailedAddress},
	        IS_DEFAULT = #{isDefault},
	        CREATE_TIME = #{createTime},
	        UPDATE_TIME = #{updateTime},
	        STATUS = #{status}
        WHERE 
	        ID = #{id}
    ]]>
	</update>
	
	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from customer_address
    ]]>
		<include refid="dynamicWhere"/>
    </delete>
    
    <delete id="batchDelete" parameterType="list">
        delete from customer_address where ID IN 
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}        
		</foreach> 
    </delete>
    
    <delete id="batchDeleteByLocalId" parameterType="list">
        delete from customer_address where LOCAL_ID in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}		
		</foreach> 
    </delete>
    
    <select id="getById" resultMap="addressResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM customer_address 
	        WHERE 
		        ID = #{id}
	    ]]>
	</select>
	
	<select id="getByIds" resultMap="addressResult">
		SELECT <include refid="commonColumns" />
		FROM customer_address WHERE ID IN 
		<foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}        
		</foreach>  
	</select>
	
	<sql id="dynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(customerNo)">
				AND CUSTOMER_NO = #{customerNo}
			</if>
	       <if test="@Ognl@isNotEmpty(consignee)">
				AND CONSIGNEE = #{consignee}
			</if>
	       <if test="@Ognl@isNotEmpty(mobile)">
				AND MOBILE = #{mobile}
			</if>
	       <if test="@Ognl@isNotEmpty(location)">
				AND LOCATION = #{location}
			</if>
	       <if test="@Ognl@isNotEmpty(detailedAddress)">
				AND DETAILED_ADDRESS = #{detailedAddress}
			</if>
	       <if test="@Ognl@isNotEmpty(isDefault)">
				AND IS_DEFAULT = #{isDefault}
			</if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND CREATE_TIME >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND CREATE_TIME &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND UPDATE_TIME >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND UPDATE_TIME &lt;= #{updateTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND STATUS = #{status}
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM customer_address 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="addressResult">
    	SELECT 
    	<if test="@Ognl@isEmpty(count)">
    		<include refid="commonColumns" />
    	</if>
    	<if test="@Ognl@isNotEmpty(count)">
    		count(*) as id
    	</if>
	    FROM customer_address 
		<include refid="dynamicWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

