<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<!-- 持仓表 -->
<mapper namespace="CustomerProduct">
	
	<resultMap id="customerProductResult" type="CustomerProduct">
        <result property="id" column="ID"/>
        <result property="productCode" column="PRODUCT_CODE"/>
        <result property="customerNo" column="CUSTOMER_NO"/>
        <result property="totalNum" column="TOTAL_NUM"/>
        <result property="price" column="PRICE"/>
        <result property="cost" column="COST"/>
        <result property="sellNum" column="SELL_NUM"/>
        <result property="buyPoundage" column="BUY_POUNDAGE"/>
        <result property="sellPoundage" column="SELL_POUNDAGE"/>
        <result property="buyCost" column="BUY_COST"/>
        <result property="cashFund" column="CASH_FUND"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="updateTime" column="UPDATE_TIME"/>
        <result property="status" column="STATUS"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	ID,
        	PRODUCT_CODE,
        	CUSTOMER_NO,
        	TOTAL_NUM,
        	PRICE,
        	COST,
        	SELL_NUM,
        	BUY_POUNDAGE,
        	SELL_POUNDAGE,
        	BUY_COST,
        	CASH_FUND,
        	CREATE_TIME,
        	UPDATE_TIME,
        	STATUS
	    ]]>
	</sql>
	
	<sql id="commonAliasColumns">
	    <![CDATA[
        	x.ID,
        	x.PRODUCT_CODE,
        	x.CUSTOMER_NO,
        	x.TOTAL_NUM,
        	x.PRICE,
        	x.COST,
        	x.SELL_NUM,
        	x.BUY_POUNDAGE, 
        	x.SELL_POUNDAGE,
        	x.BUY_COST, 
        	x.CASH_FUND,
        	x.CREATE_TIME,
        	x.UPDATE_TIME,
        	x.STATUS
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="CustomerProduct">
    <![CDATA[
        INSERT INTO customer_product (
        	ID,
        	PRODUCT_CODE,
        	CUSTOMER_NO,
        	TOTAL_NUM,
        	PRICE,
        	COST,
        	SELL_NUM,
        	BUY_POUNDAGE,
        	SELL_POUNDAGE,
        	BUY_COST,
        	CASH_FUND,
        	CREATE_TIME,
        	UPDATE_TIME,
        	STATUS
        ) VALUES (
        	#{id},
        	#{productCode},
        	#{customerNo},
        	#{totalNum},
        	#{price},
        	#{cost},
        	#{sellNum},
        	#{buyPoundage},
        	#{sellPoundage},
        	#{buyCost},
        	#{cashFund},
        	#{createTime},
        	#{updateTime},
        	#{status}
        )
    ]]>
	</insert>
    
	<update id="update" parameterType="CustomerProduct">
    <![CDATA[
        UPDATE customer_product SET
	        PRODUCT_CODE = #{productCode},
	        CUSTOMER_NO = #{customerNo},
	        TOTAL_NUM = #{totalNum},
	        PRICE = #{price},
	        COST = #{cost},
	        SELL_NUM = #{sellNum},
	        BUY_POUNDAGE = #{buyPoundage},
	        SELL_POUNDAGE = #{sellPoundage},
	        BUY_COST = #{buyCost},
	        CASH_FUND = #{cashFund},
	        CREATE_TIME = #{createTime},
	        UPDATE_TIME = #{updateTime},
	        STATUS = #{status}
        WHERE 
	        ID = #{id}
    ]]>
	</update>
	
	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from customer_product
    ]]>
		<include refid="dynamicWhere"/>
    </delete>
    
    <delete id="batchDelete" parameterType="list">
        delete from customer_product where ID IN 
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach> 
    </delete>
    
    <delete id="batchDeleteByLocalId" parameterType="list">
        delete from customer_product where LOCAL_ID in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}		</foreach> 
    </delete>
    
    <select id="getById" resultMap="customerProductResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM customer_product 
	        WHERE 
		        ID = #{id}
	    ]]>
	</select>
	
	<select id="getByIds" resultMap="customerProductResult">
		SELECT <include refid="commonColumns" />
		FROM customer_product WHERE ID IN 
		<foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}        
		</foreach>  
	</select>
	
	<sql id="dynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(productCode)">
				AND PRODUCT_CODE = #{productCode}
			</if>
	       <if test="@Ognl@isNotEmpty(customerNo)">
				AND CUSTOMER_NO = #{customerNo}
			</if>
	       <if test="@Ognl@isNotEmpty(totalNum)">
				AND TOTAL_NUM = #{totalNum}
			</if>
	       <if test="@Ognl@isNotEmpty(price)">
				AND PRICE = #{price}
			</if>
	       <if test="@Ognl@isNotEmpty(cost)">
				AND COST = #{cost}
			</if>
	       <if test="@Ognl@isNotEmpty(sellNum)">
				AND SELL_NUM = #{sellNum}
		   </if>
	       <if test="@Ognl@isNotEmpty(buyCost)">
				AND BUY_COST = #{buyCost}
		   </if>
	       <if test="@Ognl@isNotEmpty(cashFund)">
				AND CASH_FUND = #{cashFund}
		   </if>
		   
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND CREATE_TIME >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND CREATE_TIME &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND UPDATE_TIME >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND UPDATE_TIME &lt;= #{updateTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND STATUS = #{status}
			</if>
			<if test="@Ognl@isNotEmpty(sellLowerTotal)">
				AND SELL_NUM = TOTAL_NUM
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM customer_product 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="customerProductResult">
    	SELECT 
    	<if test="@Ognl@isEmpty(count)">
    		<include refid="commonColumns" />
    	</if>
    	<if test="@Ognl@isNotEmpty(count)">
    		count(*) as id
    	</if>
	    FROM customer_product 
		<include refid="dynamicWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	<update id="updateSellNumAll" parameterType="long">
    	UPDATE customer_product SET
        SELL_NUM = TOTAL_NUM,
        UPDATE_TIME = now()
        WHERE PRODUCT_CODE=#{productCode}
    </update>
    
    <update id="updatePrice" parameterType="long">
    	UPDATE customer_product SET
        PRICE = #{price},
        UPDATE_TIME = now()
        WHERE PRODUCT_CODE=#{productCode}
    </update>
    
</mapper>

