<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<!-- 公司相关用户通知表 -->
<mapper namespace="EmailUser">
	
	<resultMap id="emailUserResult" type="EmailUser">
        <result property="id" column="ID"/>
        <result property="userId" column="USER_ID"/>
        <result property="userName" column="USER_NAME"/>
        <result property="title" column="TITLE"/>
        <result property="nanoTime" column="NANO_TIME"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="status" column="STATUS"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	ID,
        	USER_ID,
        	USER_NAME,
        	TITLE,
        	NANO_TIME,
        	CREATE_TIME,
        	STATUS
	    ]]>
	</sql>
	
	<sql id="commonAliasColumns">
	    <![CDATA[
        	x.ID,
        	x.USER_ID,
        	x.USER_NAME,
        	x.TITLE,
        	x.NANO_TIME,
        	x.CREATE_TIME,
        	x.STATUS
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="EmailUser">
    <![CDATA[
        INSERT INTO email_user (
        	ID,
        	USER_ID,
        	USER_NAME,
        	TITLE,
        	NANO_TIME,
        	CREATE_TIME,
        	STATUS
        ) VALUES (
        	#{id},
        	#{userId},
        	#{userName},
        	#{title},
        	#{nanoTime},
        	#{createTime},
        	#{status}
        )
    ]]>
	</insert>
    
	<update id="update" parameterType="EmailUser">
    <![CDATA[
        UPDATE email_user SET
	        USER_ID = #{userId},
	        USER_NAME = #{userName},
	        TITLE = #{title},
	        NANO_TIME = #{nanoTime},
	        CREATE_TIME = #{createTime},
	        STATUS = #{status}
        WHERE 
	        ID = #{id}
    ]]>
	</update>
	
	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from email_user
    ]]>
		<include refid="dynamicWhere"/>
    </delete>
    
    <delete id="batchDelete" parameterType="list">
        delete from email_user where ID IN 
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach> 
    </delete>
    
    <delete id="batchDeleteByLocalId" parameterType="list">
        delete from email_user where LOCAL_ID in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}		</foreach> 
    </delete>
    
    <select id="getById" resultMap="emailUserResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM email_user 
	        WHERE 
		        ID = #{id}
	    ]]>
	</select>
	
	<select id="getByIds" resultMap="emailUserResult">
		SELECT <include refid="commonColumns" />
		FROM email_user WHERE ID IN 
		<foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach>  
	</select>
	
	<sql id="dynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				AND USER_ID = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(userName)">
				AND USER_NAME = #{userName}
			</if>
	       <if test="@Ognl@isNotEmpty(title)">
				AND TITLE = #{title}
			</if>
	       <if test="@Ognl@isNotEmpty(nanoTime)">
				AND NANO_TIME = #{nanoTime}
			</if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND CREATE_TIME >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND CREATE_TIME &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND STATUS = #{status}
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM email_user 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="emailUserResult">
    	SELECT 
    	<if test="@Ognl@isEmpty(count)">
    		<include refid="commonColumns" />
    	</if>
    	<if test="@Ognl@isNotEmpty(count)">
    		count(*) as id
    	</if>
	    FROM email_user 
		<include refid="dynamicWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

