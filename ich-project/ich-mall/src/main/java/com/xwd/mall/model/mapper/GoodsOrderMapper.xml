<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<!-- 客户商品订单 -->
<mapper namespace="GoodsOrder">
	
	<resultMap id="goodsOrderResult" type="GoodsOrder">
        <result property="id" column="ID"/>
        <result property="orderNo" column="ORDER_NO"/>
        <result property="tradeCode" column="TRADE_CODE"/>
        <result property="customerNo" column="CUSTOMER_NO"/>
       	<result property="addressId" column="ADDRESS_ID"/>
        <result property="amount" column="AMOUNT"/>
        <result property="paymentAmount" column="PAYMENT_AMOUNT"/>
        <result property="payWay" column="PAY_WAY"/>
        <result property="payStatus" column="PAY_STATUS"/>
        <result property="orderStatus" column="ORDER_STATUS"/>
        <result property="areaPlatMark" column="AREA_PLAT_MARK"/>
        <result property="payTime" column="PAY_TIME"/>
        <result property="description" column="DESCRIPTION"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="updateTime" column="UPDATE_TIME"/>
        <result property="status" column="STATUS"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	ID,
        	ORDER_NO,
        	TRADE_CODE,
        	CUSTOMER_NO,
        	ADDRESS_ID,
        	AMOUNT,
        	PAYMENT_AMOUNT,
        	PAY_WAY,
        	PAY_STATUS,
        	ORDER_STATUS,
        	AREA_PLAT_MARK,
        	PAY_TIME,
        	DESCRIPTION,
        	CREATE_TIME,
        	UPDATE_TIME,
        	STATUS
	    ]]>
	</sql>
	
	<sql id="commonAliasColumns">
	    <![CDATA[
        	x.ID,
        	x.ORDER_NO,
        	x.TRADE_CODE,
        	x.CUSTOMER_NO,
        	x.ADDRESS_ID;
        	x.AMOUNT,
        	x.PAYMENT_AMOUNT,
        	x.PAY_WAY,
        	x.PAY_STATUS,
        	x.ORDER_STATUS,
        	x.AREA_PLAT_MARK,
        	x.PAY_TIME,
        	x.DESCRIPTION,
        	x.CREATE_TIME,
        	x.UPDATE_TIME,
        	x.STATUS
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" parameterType="GoodsOrder">
        INSERT INTO mall_goods_order (
        	ORDER_NO,
        	TRADE_CODE,
        	CUSTOMER_NO,
        	ADDRESS_ID,
        	AMOUNT,
        	PAYMENT_AMOUNT,
        	PAY_WAY,
        	PAY_STATUS,
        	ORDER_STATUS,
        	AREA_PLAT_MARK,
        	PAY_TIME,
        	DESCRIPTION,
        	CREATE_TIME,
        	UPDATE_TIME,
        	STATUS
        ) VALUES (
        	#{orderNo},
        	#{tradeCode},
        	#{customerNo},
        	#{addressId},
        	#{amount},
        	#{paymentAmount},
        	#{payWay},
        	#{payStatus},
        	#{orderStatus},
        	#{areaPlatMark},
        	#{payTime},
        	#{description},
        	#{createTime},
        	#{updateTime},
        	#{status}
        )
		<selectKey resultType="java.lang.Long" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID() AS ID
        </selectKey>
	</insert>
    
	<update id="update" parameterType="GoodsOrder">
    <![CDATA[
        UPDATE mall_goods_order SET
	        ORDER_NO = #{orderNo},
	        TRADE_CODE = #{tradeCode},
	        ADDRESS_ID = #{addressId},
	        AMOUNT = #{amount},
	        PAYMENT_AMOUNT = #{paymentAmount},
	        PAY_WAY = #{payWay},
	        PAY_STATUS = #{payStatus},
	        ORDER_STATUS = #{orderStatus},
	        AREA_PLAT_MARK = #{areaPlatMark},
	        PAY_TIME = #{payTime},
	        DESCRIPTION = #{description},
	        CREATE_TIME = #{createTime},
	        UPDATE_TIME = #{updateTime},
	        STATUS = #{status}
        WHERE 
	        ID = #{id}
    ]]>
	</update>
	
	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from mall_goods_order
    ]]>
		<include refid="dynamicWhere"/>
    </delete>
    
    <delete id="batchDelete" parameterType="list">
        delete from mall_goods_order where ID IN 
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}        
		</foreach> 
    </delete>
    
    <delete id="batchDeleteByLocalId" parameterType="list">
        delete from mall_goods_order where LOCAL_ID in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}		
		</foreach> 
    </delete>
    
    <select id="getById" resultMap="goodsOrderResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM mall_goods_order 
	        WHERE 
		        ID = #{id}
	    ]]>
	</select>
	
	<select id="getByIds" resultMap="goodsOrderResult">
		SELECT <include refid="commonColumns" />
		FROM mall_goods_order WHERE ID IN 
		<foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach>  
	</select>
	
	<sql id="dynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(orderNo)">
				AND ORDER_NO = #{orderNo}
			</if>
	       <if test="@Ognl@isNotEmpty(tradeCode)">
				AND TRADE_CODE = #{tradeCode}
			</if>
	       <if test="@Ognl@isNotEmpty(customerNo)">
				AND CUSTOMER_NO = #{customerNo}
			</if>
			<if test="@Ognl@isNotEmpty(addressId)">
				AND ADDRESS_ID = #{addressId}
			</if>
	       <if test="@Ognl@isNotEmpty(amount)">
				AND AMOUNT = #{amount}
			</if>
	       <if test="@Ognl@isNotEmpty(paymentAmount)">
				AND PAYMENT_AMOUNT = #{paymentAmount}
			</if>
	       <if test="@Ognl@isNotEmpty(payWay)">
				AND PAY_WAY = #{payWay}
			</if>
	       <if test="@Ognl@isNotEmpty(payStatus)">
				AND PAY_STATUS = #{payStatus}
			</if>
			<if test="@Ognl@isNotEmpty(orderStatus)">
				AND ORDER_STATUS = #{orderStatus}
			</if>
	       <if test="@Ognl@isNotEmpty(areaPlatMark)">
				AND AREA_PLAT_MARK = #{areaPlatMark}
			</if>
	       <if test="@Ognl@isNotEmpty(payTimeBegin)">
				AND PAY_TIME >= #{payTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(payTimeEnd)">
				AND PAY_TIME &lt;= #{payTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(description)">
				AND DESCRIPTION = #{description}
			</if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND CREATE_TIME >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND CREATE_TIME &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND UPDATE_TIME >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND UPDATE_TIME &lt;= #{updateTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND STATUS = #{status}
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM mall_goods_order 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="goodsOrderResult">
    	SELECT 
    	<if test="@Ognl@isEmpty(count)">
    		<include refid="commonColumns" />
    	</if>
    	<if test="@Ognl@isNotEmpty(count)">
    		count(*) as id
    	</if>
	    FROM mall_goods_order 
		<include refid="dynamicWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
    
    <update id="updateOrderStatus" parameterType="GoodsOrder">
    <![CDATA[
        UPDATE mall_goods_order SET
	        ORDER_STATUS = #{orderStatus},
	        CREATE_TIME = #{createTime},
	        UPDATE_TIME = #{updateTime},
	        STATUS = #{status}
        WHERE 
	        ID = #{id}
    ]]>
	</update>

	
</mapper>

