<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<!-- 产品会员指定表 -->
<mapper namespace="ProductCustomer">
	
	<resultMap id="productCustomerResult" type="ProductCustomer">
        <result property="id" column="ID"/>
        <result property="productCode" column="PRODUCT_CODE"/>
        <result property="customerNo" column="CUSTOMER_NO"/>
        <result property="sharesNumber" column="SHARES_NUMBER"/>
        <result property="price" column="PRICE"/>
        <result property="buyTime" column="BUY_TIME"/>
        <result property="sellTime" column="SELL_TIME"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="updateTime" column="UPDATE_TIME"/>
        <result property="status" column="STATUS"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	ID,
        	PRODUCT_CODE,
        	CUSTOMER_NO,
        	SHARES_NUMBER,
        	PRICE,
        	BUY_TIME,
        	SELL_TIME,
        	CREATE_TIME,
        	UPDATE_TIME,
        	STATUS
	    ]]>
	</sql>
	
	<sql id="commonAliasColumns">
	    <![CDATA[
        	x.ID,
        	x.PRODUCT_CODE,
        	x.CUSTOMER_NO,
        	x.SHARES_NUMBER,
        	x.PRICE,
        	x.BUY_TIME,
        	x.SELL_TIME,
        	x.CREATE_TIME,
        	x.UPDATE_TIME,
        	x.STATUS
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="ProductCustomer">
    <![CDATA[
        INSERT INTO product_customer (
        	ID,
        	PRODUCT_CODE,
        	CUSTOMER_NO,
        	SHARES_NUMBER,
        	PRICE,
        	BUY_TIME,
        	SELL_TIME,
        	CREATE_TIME,
        	UPDATE_TIME,
        	STATUS
        ) VALUES (
        	#{id},
        	#{productCode},
        	#{customerNo},
        	#{sharesNumber},
        	#{price},
        	#{buyTime},
        	#{sellTime},
        	#{createTime},
        	#{updateTime},
        	#{status}
        )
    ]]>
	</insert>
    
	<update id="update" parameterType="ProductCustomer">
    <![CDATA[
        UPDATE product_customer SET
	        PRODUCT_CODE = #{productCode},
	        CUSTOMER_NO = #{customerNo},
	        SHARES_NUMBER = #{sharesNumber},
	        PRICE = #{price},
	        BUY_TIME = #{buyTime},
	        SELL_TIME = #{sellTime},
	        CREATE_TIME = #{createTime},
	        UPDATE_TIME = #{updateTime},
	        STATUS = #{status}
        WHERE 
	        ID = #{id}
    ]]>
	</update>
	
	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from product_customer
    ]]>
		<include refid="dynamicWhere"/>
    </delete>
    
    <delete id="batchDelete" parameterType="list">
        delete from product_customer where ID IN 
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach> 
    </delete>
    
    <delete id="batchDeleteByLocalId" parameterType="list">
        delete from product_customer where LOCAL_ID in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}		</foreach> 
    </delete>
    
    <select id="getById" resultMap="productCustomerResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM product_customer 
	        WHERE 
		        ID = #{id}
	    ]]>
	</select>
	
	<select id="getByIds" resultMap="productCustomerResult">
		SELECT <include refid="commonColumns" />
		FROM product_customer WHERE ID IN 
		<foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach>  
	</select>
	
	<sql id="dynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(productCode)">
				AND PRODUCT_CODE = #{productCode}
			</if>
	       <if test="@Ognl@isNotEmpty(customerNo)">
				AND CUSTOMER_NO = #{customerNo}
			</if>
	       <if test="@Ognl@isNotEmpty(sharesNumber)">
				AND SHARES_NUMBER = #{sharesNumber}
			</if>
	       <if test="@Ognl@isNotEmpty(price)">
				AND PRICE = #{price}
			</if>
	       <if test="@Ognl@isNotEmpty(buyTimeBegin)">
				AND BUY_TIME >= #{buyTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(buyTimeEnd)">
				AND BUY_TIME &lt;= #{buyTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(sellTimeBegin)">
				AND SELL_TIME >= #{sellTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(sellTimeEnd)">
				AND SELL_TIME &lt;= #{sellTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND CREATE_TIME >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND CREATE_TIME &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND UPDATE_TIME >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND UPDATE_TIME &lt;= #{updateTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND STATUS = #{status}
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM product_customer 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="productCustomerResult">
    	SELECT 
    	<if test="@Ognl@isEmpty(count)">
    		<include refid="commonColumns" />
    	</if>
    	<if test="@Ognl@isNotEmpty(count)">
    		count(*) as id
    	</if>
	    FROM product_customer 
		<include refid="dynamicWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

