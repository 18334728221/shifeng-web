<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<!-- 产品表 -->
<mapper namespace="Product">
	
	<resultMap id="productResult" type="Product">
        <result property="id" column="ID"/>
        <result property="name" column="NAME"/>
        <result property="code" column="CODE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="price" column="PRICE"/>
        <result property="promotionPrice" column="PROMOTION_PRICE"/>
        <result property="totalShareCapital" column="TOTAL_SHARE_CAPITAL"/>
        <result property="craftsmanNo" column="CRAFTSMAN_NO"/>
        <result property="categoryId" column="CATEGORY_ID"/>
        <result property="stock" column="STOCK"/>
        <result property="circulatingStock" column="CIRCULATING_STOCK"/>
        <result property="isTop" column="IS_TOP"/>
        <result property="isHot" column="IS_HOT"/>
        <result property="isNew" column="IS_NEW"/>
        <result property="isInExchange" column="IS_IN_EXCHANGE"/>
        <result property="imageId" column="IMAGE_ID"/>
        <result property="imageServerId" column="IMAGE_SERVER_ID"/>
        <result property="description" column="DESCRIPTION"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="updateTime" column="UPDATE_TIME"/>
        <result property="status" column="STATUS"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	ID,
        	NAME,
        	CODE,
        	CATEGORY_CODE,
        	PRICE,
        	PROMOTION_PRICE,
        	TOTAL_SHARE_CAPITAL,
        	CRAFTSMAN_NO,
        	CATEGORY_ID,
        	STOCK,
        	CIRCULATING_STOCK,
        	IS_TOP,
        	IS_HOT,
        	IS_NEW,
        	IS_IN_EXCHANGE,
        	IMAGE_ID,
        	IMAGE_SERVER_ID,
        	DESCRIPTION,
        	CREATE_TIME,
        	UPDATE_TIME,
        	STATUS
	    ]]>
	</sql>
	
	<sql id="commonAliasColumns">
	    <![CDATA[
        	x.ID,
        	x.NAME,
        	x.CODE,
        	x.CATEGORY_CODE,
        	x.PRICE,
        	x.PROMOTION_PRICE,
        	x.TOTAL_SHARE_CAPITAL,
        	x.CRAFTSMAN_NO,
        	x.CATEGORY_ID,
        	x.STOCK,
        	x.CIRCULATING_STOCK,
        	x.IS_TOP,
        	x.IS_HOT,
        	x.IS_NEW,
        	x.IS_IN_EXCHANGE,
        	x.IMAGE_ID,
        	x.IMAGE_SERVER_ID,
        	x.DESCRIPTION,
        	x.CREATE_TIME,
        	x.UPDATE_TIME,
        	x.STATUS
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="Product">
    <![CDATA[
        INSERT INTO product (
        	ID,
        	NAME,
        	CODE,
        	CATEGORY_CODE,
        	PRICE,
        	PROMOTION_PRICE,
        	TOTAL_SHARE_CAPITAL,
        	CRAFTSMAN_NO,
        	CATEGORY_ID,
        	STOCK,
        	CIRCULATING_STOCK,
        	IS_TOP,
        	IS_HOT,
        	IS_NEW,
        	IS_IN_EXCHANGE,
        	IMAGE_ID,
        	IMAGE_SERVER_ID,
        	DESCRIPTION,
        	CREATE_TIME,
        	UPDATE_TIME,
        	STATUS
        ) VALUES (
        	#{id},
        	#{name},
        	#{code},
        	#{categoryCode},
        	#{price},
        	#{promotionPrice},
        	#{totalShareCapital},
        	#{craftsmanNo},
        	#{categoryId},
        	#{stock},
        	#{circulatingStock},
        	#{isTop},
        	#{isHot},
        	#{isNew},
        	#{isInExchange},
        	#{imageId},
        	#{imageServerId},
        	#{description},
        	#{createTime},
        	#{updateTime},
        	#{status}
        )
    ]]>
	</insert>
    
	<update id="update" parameterType="Product">
    <![CDATA[
        UPDATE product SET
	        NAME = #{name},
	        CODE = #{code},
	        CATEGORY_CODE = #{categoryCode},
	        PRICE = #{price},
	        PROMOTION_PRICE = #{promotionPrice},
	        TOTAL_SHARE_CAPITAL = #{totalShareCapital},
	        CRAFTSMAN_NO = #{craftsmanNo},
	        CATEGORY_ID = #{categoryId},
	        STOCK =#{stock},
        	CIRCULATING_STOCK =#{circulatingStock},
	        IS_TOP = #{isTop},
	        IS_HOT = #{isHot},
	        IS_NEW = #{isNew},
	        IS_IN_EXCHANGE = #{isInExchange},
	        IMAGE_ID = #{imageId},
	        IMAGE_SERVER_ID = #{imageServerId},
	        DESCRIPTION = #{description},
	        CREATE_TIME = #{createTime},
	        UPDATE_TIME = #{updateTime},
	        STATUS = #{status}
        WHERE 
	        ID = #{id}
    ]]>
	</update>
	
	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from product
    ]]>
		<include refid="dynamicWhere"/>
    </delete>
    
    <delete id="batchDelete" parameterType="list">
        delete from product where ID IN 
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}        
		</foreach> 
    </delete>
    
    <delete id="batchDeleteByLocalId" parameterType="list">
        delete from product where LOCAL_ID in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}		
		</foreach> 
    </delete>
    
    <select id="getById" resultMap="productResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM product 
	        WHERE 
		        ID = #{id}
	    ]]>
	</select>
	
	   <select id="getByCode" resultMap="productResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM product 
	        WHERE 
		        ID = #{id}
	    ]]>
	</select>
	
	
	<select id="getByIds" resultMap="productResult">
		SELECT <include refid="commonColumns" />
		FROM product WHERE ID IN 
		<foreach collection="list" item="ids"  open="(" separator="," close=")">   
			#{ids}        
		</foreach>  
	</select>
	
	<sql id="dynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND NAME = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(code)">
				AND CODE = #{code}
			</if>
			<if test="@Ognl@isNotEmpty(categoryCode)">
				AND CATEGORY_CODE = #{categoryCode}
			</if>
	       <if test="@Ognl@isNotEmpty(price)">
				AND PRICE = #{price}
			</if>
	       <if test="@Ognl@isNotEmpty(totalShareCapital)">
				AND TOTAL_SHARE_CAPITAL = #{totalShareCapital}
			</if>
			 <if test="@Ognl@isNotEmpty(craftsmanNo)">
				AND CRAFTSMAN_NO = #{craftsmanNo}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryId)">
				AND CATEGORY_ID = #{categoryId}
			</if>
	       <if test="@Ognl@isNotEmpty(isTop)">
				AND IS_TOP = #{isTop}
			</if>
			 <if test="@Ognl@isNotEmpty(isHot)">
				AND IS_HOT = #{isHot}
			</if>
			 <if test="@Ognl@isNotEmpty(isNew)">
				AND IS_NEW = #{isNew}
			</if>
	       <if test="@Ognl@isNotEmpty(isInExchange)">
				AND IS_IN_EXCHANGE = #{isInExchange}
			</if>
	        <if test="@Ognl@isNotEmpty(imageId)">
				AND IMAGE_ID = #{imageId}
			</if>
	       <if test="@Ognl@isNotEmpty(imageServerId)">
				AND IMAGE_SERVER_ID = #{imageServerId}
			</if>
	       <if test="@Ognl@isNotEmpty(description)">
				AND DESCRIPTION = #{description}
			</if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND CREATE_TIME >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND CREATE_TIME &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND UPDATE_TIME >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND UPDATE_TIME &lt;= #{updateTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND STATUS = #{status}
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM product 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="productResult">
    	SELECT 
    	<if test="@Ognl@isEmpty(count)">
    		<include refid="commonColumns" />
    	</if>
    	<if test="@Ognl@isNotEmpty(count)">
    		count(*) as id
    	</if>
	    FROM product 
		<include refid="dynamicWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
	
	<select id="findLastProduct" resultMap="productResult">
    	SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM  product ORDER BY ID desc LIMIT 1 
	    ]]>
    </select>
    
    <!-- 推荐 -->
    <select id="findExceptByProductId" resultMap="productResult" parameterType="map">
    	SELECT <include refid="commonColumns" />
	    FROM product 
		WHERE STATUS = 1
		<if test="@Ognl@isNotEmpty(id)">
	   		AND ID != #{id} 
	    </if>
	    <if test="@Ognl@isNotEmpty(categoryId)">
	   		AND CATEGORY_ID != #{categoryId} 
	    </if>
		LIMIT 6
    </select>
   <!--  搜索 -->
    <select id="searchProduct" resultMap="productResult">
    	SELECT <include refid="commonColumns" />
	    FROM product WHERE NAME LIKE concat('%', #{name}, '%')
    </select>
    
    <!-- 最新产品 -->
    <select id="findHomeIsNew" resultMap="productResult" parameterType="map">
    	SELECT <include refid="commonColumns" />
	    FROM product 
		WHERE STATUS = 1
	    <if test="@Ognl@isNotEmpty(isNew)">
	   		AND IS_NEW = #{isNew} 
	    </if>
		LIMIT 2
    </select>
   <!--  根据属性ID查询最后一条 -->
    <select id="findLastProductByCategory" resultMap="productResult" parameterType="map">
    	SELECT <include refid="commonColumns" />
    	<![CDATA[
		    FROM product 
	        WHERE 
		        CATEGORY_ID = #{categoryId} ORDER BY ID DESC LIMIT 1 
	    ]]>
    </select>
	
</mapper>

