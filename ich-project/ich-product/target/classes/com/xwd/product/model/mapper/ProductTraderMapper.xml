<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<!-- 产品操盘手表 -->
<mapper namespace="ProductTrader">
	
	<resultMap id="productTraderResult" type="ProductTrader">
        <result property="id" column="ID"/>
        <result property="productCode" column="PRODUCT_CODE"/>
        <result property="customerNo" column="CUSTOMER_NO"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	ID,
        	PRODUCT_CODE,
        	CUSTOMER_NO
	    ]]>
	</sql>
	
	<sql id="commonAliasColumns">
	    <![CDATA[
        	x.ID,
        	x.PRODUCT_CODE,
        	x.CUSTOMER_NO
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="ProductTrader">
    <![CDATA[
        INSERT INTO product_trader (
        	ID,
        	PRODUCT_CODE,
        	CUSTOMER_NO
        ) VALUES (
        	#{id},
        	#{productCode},
        	#{customerNo}
        )
    ]]>
	</insert>
    
	<update id="update" parameterType="ProductTrader">
    <![CDATA[
        UPDATE product_trader SET
	        PRODUCT_CODE = #{productCode},
	        CUSTOMER_NO = #{customerNo}
        WHERE 
	        ID = #{id}
    ]]>
	</update>
	
	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from product_trader
    ]]>
		<include refid="dynamicWhere"/>
    </delete>
    
    <delete id="batchDelete" parameterType="list">
        delete from product_trader where ID IN 
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach> 
    </delete>
    
    <delete id="batchDeleteByLocalId" parameterType="list">
        delete from product_trader where LOCAL_ID in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}		</foreach> 
    </delete>
    
    <select id="getById" resultMap="productTraderResult">
		SELECT <include refid="commonColumns" />
	    <![CDATA[
		    FROM product_trader 
	        WHERE 
		        ID = #{id}
	    ]]>
	</select>
	
	<select id="getByIds" resultMap="productTraderResult">
		SELECT <include refid="commonColumns" />
		FROM product_trader WHERE ID IN 
		<foreach collection="list" item="ids"  open="(" separator="," close=")">   
#{ids}        </foreach>  
	</select>
	
	<sql id="dynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(productCode)">
				AND PRODUCT_CODE = #{productCode}
			</if>
	       <if test="@Ognl@isNotEmpty(customerNo)">
				AND CUSTOMER_NO = #{customerNo}
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM product_trader 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="productTraderResult">
    	SELECT 
    	<if test="@Ognl@isEmpty(count)">
    		<include refid="commonColumns" />
    	</if>
    	<if test="@Ognl@isNotEmpty(count)">
    		count(*) as id
    	</if>
	    FROM product_trader 
		<include refid="dynamicWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

